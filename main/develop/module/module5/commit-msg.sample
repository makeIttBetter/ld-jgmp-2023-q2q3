#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.



# Read the commit message from the file provided in $1
commit_message=$(cat "$1")

# Pattern we want the commit message to match
pattern="^\[module[0-9]\] .+"

# 'grep' searches for a pattern in the input.
# '-q' means quiet mode - don't output anything.
# '-E' is extended regex mode, which allows the use of extended regular expressions.
# '$1' is a shell variable representing the first argument passed to the script.
# In the context of the commit-msg hook, $1 is the path to the temporary file that contains the commit message.
if ! echo "$commit_message" | grep -qE "$pattern"; then
    # Print an error message if the pattern doesn't match
    echo "error: invalid commit message format"
    echo "Commit message should match pattern: [module#] Description"
    exit 1 # Exit with an error status
fi


