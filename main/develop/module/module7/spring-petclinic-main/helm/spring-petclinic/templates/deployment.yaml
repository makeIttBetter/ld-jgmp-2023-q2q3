apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Release.Name }}
  name: {{ .Release.Name }}
  namespace: module7
spec:
  progressDeadlineSeconds: 600
  replicas: {{ .Values.replicaCount }}
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      containers:
        - image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: nginx
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          envFrom:
            - configMapRef:
                name: {{ .Release.Name }}-config
          env:
          - name: INTERVAL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-config
                key: interval
          volumeMounts:
          - name: config-volume
            mountPath: /etc/config
            readOnly: true
      volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config-volume
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: {{ .Release.Name }}-config
            # An array of keys from the ConfigMap to create as files
            items:
              - key: "interval"
                path: "interval"
              - key: "example.property"
                path: "example.property"
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
